"use client"

import { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Badge } from "@/components/ui/badge"
import { Loader2, ExternalLink, RefreshCw, Monitor, Code, Eye, Download } from "lucide-react"
import type { Creation } from "@/lib/types"
import { toast } from "@/components/ui/use-toast"

interface SoftwareViewerProps {
  creation: Creation
  onRegenerate: () => void
}

export function SoftwareViewer({ creation, onRegenerate }: SoftwareViewerProps) {
  const [isLoading, setIsLoading] = useState(false)
  const [viewMode, setViewMode] = useState<"preview" | "code">("preview")
  const softwareData = creation.softwareData

  const handleOpenInNewTab = () => {
    if (softwareData?.demoUrl) {
      window.open(softwareData.demoUrl, "_blank")
    }
  }

  const handleRegenerate = () => {
    setIsLoading(true)
    onRegenerate()
    setTimeout(() => setIsLoading(false), 1000)
  }

  const handleDownload = () => {
    toast({ title: "Download Code", description: "Code download functionality coming soon!" })
  }

  return (
    <div className="h-full flex flex-col">
      <Card className="flex-1 flex flex-col">
        <CardHeader className="flex-shrink-0">
          <div className="flex items-center justify-between">
            <CardTitle className="text-lg flex items-center gap-2">
              <Monitor className="h-5 w-5 text-indigo-500" />
              {viewMode === "preview" ? "Software Preview" : "Generated Code"}
            </CardTitle>
            <div className="flex items-center gap-2">
              <div className="flex items-center gap-1 bg-gray-100 dark:bg-gray-800 rounded-lg p-1">
                <Button variant={viewMode === "preview" ? "default" : "ghost"} size="sm" className="h-8 px-3" onClick={() => setViewMode("preview")}>
                  <Eye className="h-4 w-4 mr-1" />
                  Preview
                </Button>
                <Button variant={viewMode === "code" ? "default" : "ghost"} size="sm" className="h-8 px-3" onClick={() => setViewMode("code")}>
                  <Code className="h-4 w-4 mr-1" />
                  Code
                </Button>
              </div>

              {softwareData?.isGenerating && (
                <Badge variant="secondary" className="text-xs">
                  <Loader2 className="h-3 w-3 mr-1 animate-spin" />
                  Generating...
                </Badge>
              )}
              {softwareData?.demoUrl && !softwareData?.isGenerating && (
                <Badge variant="default" className="text-xs bg-green-600">
                  <Code className="h-3 w-3 mr-1" />
                  Ready
                </Badge>
              )}
            </div>
          </div>
        </CardHeader>

        <CardContent className="flex-1 flex flex-col p-4">
          <div className="flex-1 relative bg-gradient-to-br from-neutral-50 to-neutral-100 dark:from-neutral-800 dark:to-neutral-900 rounded-lg overflow-hidden min-h-[600px]">
            {softwareData?.isGenerating ? (
              <div className="w-full h-full flex items-center justify-center">
                <div className="text-center space-y-4 p-8">
                  <Loader2 className="h-12 w-12 mx-auto mb-4 text-indigo-500 animate-spin" />
                  <h3 className="font-semibold mb-2">Overhaul is Generating...</h3>
                  <p className="text-sm text-muted-foreground">AI is creating your software application with modern design and functionality.</p>
                  <p className="text-xs text-muted-foreground">This may take up to 2 minutes for complex applications.</p>
                  {/*<div className="text-xs text-indigo-600 bg-indigo-50 dark:bg-indigo-900 p-2 rounded">âœ¨ Using v0&apos;s advanced AI to build production-ready code</div>*/}
                </div>
              </div>
            ) : viewMode === "preview" && softwareData?.demoUrl ? (
              <iframe
                src={softwareData.demoUrl}
                width="100%"
                height="100%"
                className="border-0 rounded-lg"
                title={`${creation.title} - Software Preview`}
                sandbox="allow-scripts allow-same-origin allow-forms allow-popups allow-modals"
              />
            ) : viewMode === "code" && softwareData?.demoUrl ? (
              <div className="w-full h-full p-4 bg-gray-900 text-green-400 font-mono text-sm overflow-auto">
                <div className="mb-4 text-gray-300"># Generated Code for: {creation.title}</div>
                <div className="text-yellow-400 mb-2">{/* This is a placeholder for the actual generated code */}</div>
                <div className="text-blue-400 mb-2">{/* Code viewing functionality will be implemented */}</div>
                <div className="text-gray-400">{/* Generated by v0 AI */}</div>
              </div>
            ) : (
              <div className="w-full h-full flex items-center justify-center">
                <div className="text-center text-muted-foreground">
                  <Monitor className="h-16 w-16 mx-auto mb-4 opacity-50" />
                  <p className="text-lg font-medium mb-2">
                    {softwareData?.demoUrl ? "No Software Generated Yet" : "AI Needs More Information"}
                  </p>
                  <p className="text-sm">
                    {softwareData?.demoUrl
                      ? "Start building to see your application preview"
                      : "v0 has asked a question. Check the chat to respond and continue building."
                    }
                  </p>
                  {softwareData?.demoUrl && (
                    <Button
                      onClick={onRegenerate}
                      className="mt-4"
                      variant="outline"
                    >
                      Generate Software
                    </Button>
                  )}
                </div>
              </div>
            )}
          </div>

          <div className="flex-shrink-0 mt-4 flex items-center justify-between">
            <div className="flex items-center gap-2">
              {softwareData?.demoUrl && (
                <>
                  <Button variant="outline" size="sm" onClick={handleOpenInNewTab}>
                    <ExternalLink className="h-4 w-4 mr-2" />
                    Open in New Tab
                  </Button>
                  <Button variant="outline" size="sm" onClick={handleDownload}>
                    <Download className="h-4 w-4 mr-2" />
                    Download Code
                  </Button>
                </>
              )}
            </div>

            <div className="flex items-center gap-2">
              {softwareData?.demoUrl && (
                <Button variant="outline" onClick={handleRegenerate} disabled={isLoading || softwareData?.isGenerating}>
                  <RefreshCw className="h-4 w-4 mr-2" />
                  Regenerate
                </Button>
              )}
            </div>
          </div>

          {softwareData?.error && (
            <div className="mt-2 p-3 bg-red-50 dark:bg-red-900/20 border border-red-200 dark:border-red-800 rounded-lg">
              <p className="text-sm text-red-800 dark:text-red-200">
                <strong>Error:</strong> {softwareData.error}
              </p>
            </div>
          )}
        </CardContent>
      </Card>
    </div>
  )
}

